// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
class testCommRequest;
struct testCommRequestDefaultTypeInternal;
extern testCommRequestDefaultTypeInternal _testCommRequest_default_instance_;
class testCommResponse;
struct testCommResponseDefaultTypeInternal;
extern testCommResponseDefaultTypeInternal _testCommResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::testCommRequest* Arena::CreateMaybeMessage<::testCommRequest>(Arena*);
template<> ::testCommResponse* Arena::CreateMaybeMessage<::testCommResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class testCommRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testCommRequest) */ {
 public:
  inline testCommRequest() : testCommRequest(nullptr) {}
  ~testCommRequest() override;
  explicit PROTOBUF_CONSTEXPR testCommRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  testCommRequest(const testCommRequest& from);
  testCommRequest(testCommRequest&& from) noexcept
    : testCommRequest() {
    *this = ::std::move(from);
  }

  inline testCommRequest& operator=(const testCommRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline testCommRequest& operator=(testCommRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const testCommRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const testCommRequest* internal_default_instance() {
    return reinterpret_cast<const testCommRequest*>(
               &_testCommRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(testCommRequest& a, testCommRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(testCommRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(testCommRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  testCommRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<testCommRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const testCommRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const testCommRequest& from) {
    testCommRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(testCommRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testCommRequest";
  }
  protected:
  explicit testCommRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 count = 1;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testCommRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class testCommResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testCommResponse) */ {
 public:
  inline testCommResponse() : testCommResponse(nullptr) {}
  ~testCommResponse() override;
  explicit PROTOBUF_CONSTEXPR testCommResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  testCommResponse(const testCommResponse& from);
  testCommResponse(testCommResponse&& from) noexcept
    : testCommResponse() {
    *this = ::std::move(from);
  }

  inline testCommResponse& operator=(const testCommResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline testCommResponse& operator=(testCommResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const testCommResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const testCommResponse* internal_default_instance() {
    return reinterpret_cast<const testCommResponse*>(
               &_testCommResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(testCommResponse& a, testCommResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(testCommResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(testCommResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  testCommResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<testCommResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const testCommResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const testCommResponse& from) {
    testCommResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(testCommResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testCommResponse";
  }
  protected:
  explicit testCommResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kMoreInfoFieldNumber = 3,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // string more_info = 3;
  void clear_more_info();
  const std::string& more_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_more_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_more_info();
  PROTOBUF_NODISCARD std::string* release_more_info();
  void set_allocated_more_info(std::string* more_info);
  private:
  const std::string& _internal_more_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_more_info(const std::string& value);
  std::string* _internal_mutable_more_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testCommResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr more_info_;
    int32_t ret_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

class Comm_Stub;

class Comm : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Comm() {};
 public:
  virtual ~Comm();

  typedef Comm_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void testComm(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::testCommRequest* request,
                       ::testCommResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Comm);
};

class Comm_Stub : public Comm {
 public:
  Comm_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Comm_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Comm_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Comm ------------------------------------------

  void testComm(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::testCommRequest* request,
                       ::testCommResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Comm_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// testCommRequest

// int32 count = 1;
inline void testCommRequest::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t testCommRequest::_internal_count() const {
  return _impl_.count_;
}
inline int32_t testCommRequest::count() const {
  // @@protoc_insertion_point(field_get:testCommRequest.count)
  return _internal_count();
}
inline void testCommRequest::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void testCommRequest::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:testCommRequest.count)
}

// string name = 2;
inline void testCommRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& testCommRequest::name() const {
  // @@protoc_insertion_point(field_get:testCommRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testCommRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testCommRequest.name)
}
inline std::string* testCommRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:testCommRequest.name)
  return _s;
}
inline const std::string& testCommRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void testCommRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* testCommRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* testCommRequest::release_name() {
  // @@protoc_insertion_point(field_release:testCommRequest.name)
  return _impl_.name_.Release();
}
inline void testCommRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testCommRequest.name)
}

// -------------------------------------------------------------------

// testCommResponse

// int32 ret_code = 1;
inline void testCommResponse::clear_ret_code() {
  _impl_.ret_code_ = 0;
}
inline int32_t testCommResponse::_internal_ret_code() const {
  return _impl_.ret_code_;
}
inline int32_t testCommResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:testCommResponse.ret_code)
  return _internal_ret_code();
}
inline void testCommResponse::_internal_set_ret_code(int32_t value) {
  
  _impl_.ret_code_ = value;
}
inline void testCommResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:testCommResponse.ret_code)
}

// string res_info = 2;
inline void testCommResponse::clear_res_info() {
  _impl_.res_info_.ClearToEmpty();
}
inline const std::string& testCommResponse::res_info() const {
  // @@protoc_insertion_point(field_get:testCommResponse.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testCommResponse::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.res_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testCommResponse.res_info)
}
inline std::string* testCommResponse::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:testCommResponse.res_info)
  return _s;
}
inline const std::string& testCommResponse::_internal_res_info() const {
  return _impl_.res_info_.Get();
}
inline void testCommResponse::_internal_set_res_info(const std::string& value) {
  
  _impl_.res_info_.Set(value, GetArenaForAllocation());
}
inline std::string* testCommResponse::_internal_mutable_res_info() {
  
  return _impl_.res_info_.Mutable(GetArenaForAllocation());
}
inline std::string* testCommResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:testCommResponse.res_info)
  return _impl_.res_info_.Release();
}
inline void testCommResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  _impl_.res_info_.SetAllocated(res_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.res_info_.IsDefault()) {
    _impl_.res_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testCommResponse.res_info)
}

// string more_info = 3;
inline void testCommResponse::clear_more_info() {
  _impl_.more_info_.ClearToEmpty();
}
inline const std::string& testCommResponse::more_info() const {
  // @@protoc_insertion_point(field_get:testCommResponse.more_info)
  return _internal_more_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testCommResponse::set_more_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.more_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testCommResponse.more_info)
}
inline std::string* testCommResponse::mutable_more_info() {
  std::string* _s = _internal_mutable_more_info();
  // @@protoc_insertion_point(field_mutable:testCommResponse.more_info)
  return _s;
}
inline const std::string& testCommResponse::_internal_more_info() const {
  return _impl_.more_info_.Get();
}
inline void testCommResponse::_internal_set_more_info(const std::string& value) {
  
  _impl_.more_info_.Set(value, GetArenaForAllocation());
}
inline std::string* testCommResponse::_internal_mutable_more_info() {
  
  return _impl_.more_info_.Mutable(GetArenaForAllocation());
}
inline std::string* testCommResponse::release_more_info() {
  // @@protoc_insertion_point(field_release:testCommResponse.more_info)
  return _impl_.more_info_.Release();
}
inline void testCommResponse::set_allocated_more_info(std::string* more_info) {
  if (more_info != nullptr) {
    
  } else {
    
  }
  _impl_.more_info_.SetAllocated(more_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.more_info_.IsDefault()) {
    _impl_.more_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testCommResponse.more_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
